/**
 * Party Process Micro Service
 * This service is the party process
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.interop.selfcare.partyprocess.client.api

    import java.io.File
    import it.pagopa.interop.selfcare.partyprocess.client.model.Institution
    import it.pagopa.interop.selfcare.partyprocess.client.model.OnboardingInfo
    import it.pagopa.interop.selfcare.partyprocess.client.model.PartyRole
    import it.pagopa.interop.selfcare.partyprocess.client.model.Problem
    import it.pagopa.interop.selfcare.partyprocess.client.model.ProductState
    import it.pagopa.interop.selfcare.partyprocess.client.model.Products
    import it.pagopa.interop.selfcare.partyprocess.client.model.RelationshipInfo
    import it.pagopa.interop.selfcare.partyprocess.client.model.RelationshipState
    import java.util.UUID
import it.pagopa.interop.selfcare.partyprocess.client.invoker._
import it.pagopa.interop.selfcare.partyprocess.client.invoker.CollectionFormats._
import it.pagopa.interop.selfcare.partyprocess.client.invoker.ApiKeyLocations._

    object ProcessApi {
    def apply(baseUrl: String = "https://party-process") = new ProcessApi(baseUrl)
    }


    class ProcessApi(baseUrl: String) {
  /**
   *             Gets institution using internal institution id
   * 
   * Expected answers:
   *   code 200 : Institution (successful operation)
   *   code 400 : Problem (Invalid id supplied)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param id The internal identifier of the institution
   */
        def getInstitution(
                                                                    id:
                UUID
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Institution] =
        ApiRequest[Institution](ApiMethods.GET, baseUrl, "/institutions/{id}", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("id", id)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Institution](200)
        .withErrorResponse[Problem](400)
        .withErrorResponse[Problem](404)
        

  /**
   *             Expected answers:
   *   code 200 : File (Signed onboarding document retrieved)
   *   code 404 : Problem (Document not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param relationshipId the relationship id
   */
        def getOnboardingDocument(
                                                                    relationshipId:
                String
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[File] =
        ApiRequest[File](ApiMethods.GET, baseUrl, "/onboarding/relationship/{relationshipId}/document", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("relationshipId", relationshipId)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[File](200)
        .withErrorResponse[Problem](404)
        

  /**
   *             Return ok
   * 
   * Expected answers:
   *   code 200 : OnboardingInfo (successful operation)
   *   code 404 : Problem (Not found)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param institutionId The internal identifier of the institution
   * @param institutionExternalId The external Id of an institution you can filter the retrieval with
   * @param states comma separated sequence of states to filter the response with
   */
        def getOnboardingInfo(
                                                                                institutionId:
                Option[UUID],
                                                        institutionExternalId:
                Option[String],
                                                        states:
                Seq[RelationshipState]
                                )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[OnboardingInfo] =
        ApiRequest[OnboardingInfo](ApiMethods.GET, baseUrl, "/onboarding/info", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        .withQueryParam("institutionId", institutionId).withQueryParam("institutionExternalId", institutionExternalId).withQueryParam("states", ArrayValues(states, CSV))
        
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[OnboardingInfo](200)
        .withErrorResponse[Problem](404)
        .withErrorResponse[Problem](400)
        

  /**
   *             Gets relationship
   * 
   * Expected answers:
   *   code 200 : RelationshipInfo (successful operation)
   *   code 400 : Problem (Invalid id supplied)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param relationshipId The identifier of the relationship
   */
        def getRelationship(
                                                                    relationshipId:
                UUID
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[RelationshipInfo] =
        ApiRequest[RelationshipInfo](ApiMethods.GET, baseUrl, "/relationships/{relationshipId}", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("relationshipId", relationshipId)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[RelationshipInfo](200)
        .withErrorResponse[Problem](400)
        .withErrorResponse[Problem](404)
        

  /**
   *             Return ok
   * 
   * Expected answers:
   *   code 200 : Seq[RelationshipInfo] (successful operation)
   *   code 400 : Problem (Invalid institution id supplied)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param id The internal identifier of the institution
   * @param personId the person identifier
   * @param roles comma separated sequence of role to filter the response with
   * @param states comma separated sequence of states to filter the response with
   * @param products comma separated sequence of products to filter the response with
   * @param productRoles comma separated sequence of product roles to filter the response with
   */
        def getUserInstitutionRelationships(
                                                                    id:
                UUID,
                                                                    personId:
                Option[UUID],
                                                        roles:
                Seq[PartyRole],
                                                        states:
                Seq[RelationshipState],
                                                        products:
                Seq[String],
                                                        productRoles:
                Seq[String]
                                )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Seq[RelationshipInfo]] =
        ApiRequest[Seq[RelationshipInfo]](ApiMethods.GET, baseUrl, "/institutions/{id}/relationships", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        .withQueryParam("personId", personId).withQueryParam("roles", ArrayValues(roles, CSV)).withQueryParam("states", ArrayValues(states, CSV)).withQueryParam("products", ArrayValues(products, CSV)).withQueryParam("productRoles", ArrayValues(productRoles, CSV))
        .withPathParam("id", id)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Seq[RelationshipInfo]](200)
        .withErrorResponse[Problem](400)
        

  /**
   *             retrieves the products this institution is related to.
   * 
   * Expected answers:
   *   code 200 : Products (successful operation)
   *   code 404 : Problem (Institution not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param id The internal identifier of the institution
   * @param states comma separated sequence of states to filter the response with
   */
        def retrieveInstitutionProducts(
                                                                    id:
                UUID,
                                                                    states:
                Seq[ProductState]
                                )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Products] =
        ApiRequest[Products](ApiMethods.GET, baseUrl, "/institutions/{id}/products", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        .withQueryParam("states", ArrayValues(states, CSV))
        .withPathParam("id", id)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Products](200)
        .withErrorResponse[Problem](404)
        

  /**
   *             Checks if the specified institution has been onboarded on the specified product.
   * 
   * Expected answers:
   *   code 204 :  (successful operation)
   *   code 400 : Problem (Invalid ID supplied)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param externalId The external identifier of the institution
   * @param productId The identifier of the product
   */
        def verifyOnboarding(
                                                                    externalId:
                String,
                                                        productId:
                String
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Unit] =
        ApiRequest[Unit](ApiMethods.HEAD, baseUrl, "/onboarding/institution/{externalId}/products/{productId}", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("externalId", externalId).withPathParam("productId", productId)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Unit](204)
        .withErrorResponse[Problem](400)
        .withErrorResponse[Problem](404)
        



    }

