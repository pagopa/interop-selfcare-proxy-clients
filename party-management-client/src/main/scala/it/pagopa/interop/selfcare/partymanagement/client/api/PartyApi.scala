/**
 * Party Management Micro Service V1
 * This service is the party manager
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.interop.selfcare.partymanagement.client.api

    import it.pagopa.interop.selfcare.partymanagement.client.model.Attribute
    import it.pagopa.interop.selfcare.partymanagement.client.model.BulkInstitutions
    import it.pagopa.interop.selfcare.partymanagement.client.model.BulkPartiesSeed
    import it.pagopa.interop.selfcare.partymanagement.client.model.Institution
    import it.pagopa.interop.selfcare.partymanagement.client.model.PartyRole
    import it.pagopa.interop.selfcare.partymanagement.client.model.Person
    import it.pagopa.interop.selfcare.partymanagement.client.model.Problem
    import it.pagopa.interop.selfcare.partymanagement.client.model.Relationship
    import it.pagopa.interop.selfcare.partymanagement.client.model.RelationshipState
    import it.pagopa.interop.selfcare.partymanagement.client.model.Relationships
    import java.util.UUID
import it.pagopa.interop.selfcare.partymanagement.client.invoker._
import it.pagopa.interop.selfcare.partymanagement.client.invoker.CollectionFormats._
import it.pagopa.interop.selfcare.partymanagement.client.invoker.ApiKeyLocations._

    object PartyApi {
    def apply(baseUrl: String = "https://party-management") = new PartyApi(baseUrl)
    }


    class PartyApi(baseUrl: String) {
  /**
   *             returns a collection of all the parties for the corresponding identifiers.
   * 
   * Expected answers:
   *   code 200 : BulkInstitutions (collection of institutions)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Institutions not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param bulkPartiesSeed 
   */
        def bulkInstitutions(
                                                                                            bulkPartiesSeed:
                BulkPartiesSeed
                    )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[BulkInstitutions] =
        ApiRequest[BulkInstitutions](ApiMethods.POST, baseUrl, "/bulk/institutions", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        .withBody(bulkPartiesSeed)
        
        
        
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[BulkInstitutions](200)
        .withErrorResponse[Problem](400)
        .withErrorResponse[Problem](404)
        

  /**
   *             Return ok
   * 
   * Expected answers:
   *   code 200 :  (successful operation)
   *   code 404 :  (Institution not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param id The ID of the Institution to check
   */
        def existsInstitutionById(
                                                                    id:
                UUID
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Unit] =
        ApiRequest[Unit](ApiMethods.HEAD, baseUrl, "/institutions/{id}", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("id", id)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Unit](200)
        .withErrorResponse[Unit](404)
        

  /**
   *             Return ok
   * 
   * Expected answers:
   *   code 200 :  (Person exists)
   *   code 404 :  (Person not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param id The ID of the Person to check
   */
        def existsPersonById(
                                                                    id:
                UUID
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Unit] =
        ApiRequest[Unit](ApiMethods.HEAD, baseUrl, "/persons/{id}", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("id", id)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Unit](200)
        .withErrorResponse[Unit](404)
        

  /**
   *             returns the identified institution, if any.
   * 
   * Expected answers:
   *   code 200 : Institution (Institution)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Institution not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param id The ID of the Institution to check
   */
        def getInstitutionById(
                                                                    id:
                UUID
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Institution] =
        ApiRequest[Institution](ApiMethods.GET, baseUrl, "/institutions/{id}", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("id", id)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Institution](200)
        .withErrorResponse[Problem](400)
        .withErrorResponse[Problem](404)
        

  /**
   *             returns the attributes of the identified party, if any.
   * 
   * Expected answers:
   *   code 200 : Seq[Attribute] (Party Attributes)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Party not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param id Institution ID
   */
        def getPartyAttributes(
                                                                    id:
                UUID
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Seq[Attribute]] =
        ApiRequest[Seq[Attribute]](ApiMethods.GET, baseUrl, "/institutions/{id}/attributes", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("id", id)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Seq[Attribute]](200)
        .withErrorResponse[Problem](400)
        .withErrorResponse[Problem](404)
        

  /**
   *             returns the identified person, if any.
   * 
   * Expected answers:
   *   code 200 : Person (Person)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Person not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param id Person ID
   */
        def getPersonById(
                                                                    id:
                UUID
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Person] =
        ApiRequest[Person](ApiMethods.GET, baseUrl, "/persons/{id}", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("id", id)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Person](200)
        .withErrorResponse[Problem](400)
        .withErrorResponse[Problem](404)
        

  /**
   *             Return relationship
   * 
   * Expected answers:
   *   code 200 : Relationship (successful operation)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Relationship not found)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param relationshipId The ID of the Relationship to retrieve
   */
        def getRelationshipById(
                                                                    relationshipId:
                UUID
                                            )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Relationship] =
        ApiRequest[Relationship](ApiMethods.GET, baseUrl, "/relationships/{relationshipId}", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        
        .withPathParam("relationshipId", relationshipId)
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Relationship](200)
        .withErrorResponse[Problem](400)
        .withErrorResponse[Problem](404)
        

  /**
   *             Return ok
   * 
   * Expected answers:
   *   code 200 : Relationships (successful operation)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * Available security schemes:
   *   apiKeySelfcare (apiKey)
   * 
   * @param xSelfcareUid 
   * @param from 
   * @param to 
   * @param roles comma separated sequence of role to filter the response with
   * @param states comma separated sequence of states to filter the response with
   * @param products comma separated sequence of products to filter the response with
   * @param productRoles comma separated sequence of product roles to filter the response with
   */
        def getRelationships(
                                                                                from:
                Option[UUID],
                                                        to:
                Option[UUID],
                                                        roles:
                Seq[PartyRole],
                                                        states:
                Seq[RelationshipState],
                                                        products:
                Seq[String],
                                                        productRoles:
                Seq[String]
                                )
        (xSelfcareUid:String)(implicit apiKeySelfcare:ApiKeyValue): ApiRequest[Relationships] =
        ApiRequest[Relationships](ApiMethods.GET, baseUrl, "/relationships", "application/json")
        .withApiKey(apiKeySelfcare, "Ocp-Apim-Subscription-Key", HEADER)
        
        
        
        .withQueryParam("from", from).withQueryParam("to", to).withQueryParam("roles", ArrayValues(roles, CSV)).withQueryParam("states", ArrayValues(states, CSV)).withQueryParam("products", ArrayValues(products, CSV)).withQueryParam("productRoles", ArrayValues(productRoles, CSV))
        
        .withHeaderParam("x-selfcare-uid", xSelfcareUid)
        .withSuccessResponse[Relationships](200)
        .withErrorResponse[Problem](400)
        



    }

